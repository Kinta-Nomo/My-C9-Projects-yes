<!DOCTYPE html>
<html>

<head>
    <script src="p5.js/0.5.14/addons/p5.dom.js"></script>
    <script src="p5.js/0.5.14/addons/p5.sound.js"></script>
    <script src="p5.js/0.5.14/p5.js"></script>
    <link rel="stylesheet" type="text/css" >
    
    <script type="text/javascript" src="/static/MineSweeper.js">
        
                
        //library is P5.js
        //press F key for flag
        
        var checker;
        var minesLocations=[]
        var cellsLocations=[]
        var allzeros = []
        var clickedone;
        var space = false;
        var first = true;
        var flagleft=0;
        var flagstate=false;
        var inter;
        function setup(){
            createCanvas(2000,2000)
            Gameboard = new GameBoard(30,16,99)
            Gameboard.build()
        }
        var winlose = false;
        var timer = 0
        
        function Cell(x,y,aroundB,mineStat,openstate,flagstate,stayflag){
            this.x=x;
            this.y=y;
            this.mineStat=mineStat;
            this.aroundB = aroundB;
            this.openstate = openstate;
            this.flagstate = flagstate;
            
            this.drawbox = function(){
                noStroke();
                fill(255);
                triangle(this.x*20,this.y*20,this.x*20+20,this.y*20,this.x*20,this.y*20+20);
                fill(139);
                triangle(this.x*20+20,this.y*20,this.x*20,this.y*20+20,this.x*20+20,this.y*20+20);
                fill(189);
                rect(this.x*20+2,this.y*20+2,16,16);
            }
            this.checkaround = function(){
                for(i=this.x-1;i<=this.x+1;i++){
                    for(j=this.y-1;j<=this.y+1;j++){
                    }
                }
            }
            //adds number 1 to the boxes around this Cell
            this.addaround = function(){
                if (this.mineStat==true){
                    for(a=this.x-1;a<=this.x+1;a++){
                        for(b=this.y-1;b<=this.y+1;b++){
                            try{
                                cellsLocations[a][b].aroundB += 1;
                            }catch(err){
                                
                            }
                        }
                    }
                }
            }
            this.pushzero = function(){ 
                if(this.mineStat != true){
                    if(this.aroundB == 0){
                        for(a=this.x-1;a<=this.x+1;a++){
                            for(b=this.y-1;b<=this.y+1;b++){
                                try{
                                    if (cellsLocations[a][b].aroundB == 0){
                                        if (cellsLocations[a][b].openstate == false){
                                            cellsLocations[a][b].openstate = true;
                                            cellsLocations[a][b].open();
                                            allzeros.push(cellsLocations[a][b]);
                                        }
                                    }else{
                                        cellsLocations[a][b].openstate = true;
                                        cellsLocations[a][b].open();
                                        
                                        
                                    }
                                }catch(err){
                                        
                                }
                            }    
                        }
                    }else{
                        this.openstate = true
                        this.open()
                    }
                }else{
                    clickedone = [this.x,this.y]
                    fill(255,0,0)
                    rect(this.x*20,this.y*20,18,18);
                    this.showbomb();
                    Gameboard.checkflagbomb();
                    Gameboard.lose();
                }
            }
            
            this.zero = function(){
                for (i = 0;i<=allzeros.length;i++){
                    try{
                        allzeros[i].pushzero()
                    }catch(err){
                        
                    }
                }
            }
            this.open = function(){
            if (this.flagstate == false){
                stroke(123)
                fill(180)
                rect(this.x*20,this.y*20,19,19)
                stroke(0)
                noStroke()
                textWidth(20)
                textSize(10);
                if (this.aroundB != 0){
                    if (this.aroundB == 1){
                        fill(0,0,200)
                    }else if (this.aroundB == 2){
                        fill(0,200,0)
                    }else if (this.aroundB == 3){
                        fill(200,0,0)
                    }else if (this.aroundB == 4){
                            fill(1,49,127)
                    }else if (this.aroundB == 5){
                        fill(127,9,0)
                    }else if (this.aroundB == 6){
                        fill(119,168,147)
                    }else if (this.aroundB == 7){
                        fill(255)
                    }else if (this.aroundB == 8){
                        fill(173)
                    }
                    text(this.aroundB,(this.x*20)+6,(this.y*20)+12);
                }
            }
            else if(this.flagstate == true){
                    console.log(this.x,this.y)
                    this.stayflag = true
                }
                stroke(0)
            }
            this.showbomb = function() {
                stroke(123)
                fill(180)
                rect(this.x*20,this.y*20,19,19)
                stroke(0)
                fill(0);
                ellipse((this.x*20)+9.5,(this.y*20)+9.5,10,10)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9+7)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9+5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-7,(this.y*20)+9)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9-5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9-7)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9-5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+7,(this.y*20)+9)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9+5)
                stroke(255);
                strokeWeight(2.5)
                point((this.x*20)+7.4,(this.y*20)+7.4)
                strokeWeight(1)
                stroke(0);
                if ((this.x == clickedone[0]) && (this.y == clickedone[1])){
                    fill(255,0,0)
                    stroke(123)
                    rect(this.x*20,this.y*20,19,19)
                    stroke(0)
                    fill(0);
                    ellipse((this.x*20)+9.5,(this.y*20)+9.5,10,10)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9+7)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9+5)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-7,(this.y*20)+9)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9-5)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9-7)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9-5)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+7,(this.y*20)+9)
                    line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9+5)
                    stroke(255);
                    strokeWeight(2.5)
                    point((this.x*20)+7.4,(this.y*20)+7.4)
                    strokeWeight(1)
                    stroke(0);  
                }
            }
            
            this.showwrong = function() {
                stroke(123)
                fill(180)
                rect(this.x*20,this.y*20,19,19)
                stroke(0)
                fill(0)
                ellipse((this.x*20)+9.5,(this.y*20)+9.5,10,10)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9+7)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9+5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-7,(this.y*20)+9)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9-5,(this.y*20)+9-5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9,(this.y*20)+9-7)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9-5)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+7,(this.y*20)+9)
                line((this.x*20)+9,(this.y*20)+9,(this.x*20)+9+5,(this.y*20)+9+5)
                stroke(255);
                strokeWeight(2.5)
                point((this.x*20)+7.4,(this.y*20)+7.4)
                strokeWeight(1)
                stroke(0);
                stroke(255,0,0)
                strokeWeight(2)
                line((this.x)*20+3,(this.y)*20+4,(this.x)*20+16,(this.y)*20+16)
                line((this.x)*20+3,(this.y)*20+16,(this.x)*20+16,(this.y)*20+4)
                stroke(0)
                strokeWeight(1)
            }
            this.checkflag = function(win_or_not) {
                    if (this.flagstate == true){
                        console.log('draw flag')
                        this.drawbox()
                        stroke(0)
                        strokeWeight(1)
                        fill(0);
                        triangle((this.x*20)+10,(this.y*20)+13,(this.x*20)+5.5,(this.y*20)+16,(this.x*20)+14.5,(this.y*20)+16)
                        rect((this.x*20)+9,(this.y*20)+5,1,10)
                        fill(255,0,0);
                        strokeWeight(0)
                        triangle((this.x*20)+11,(this.y*20)+3,(this.x*20)+4,(this.y*20)+6.5,(this.x*20)+11,(this.y*20)+11)
                        strokeWeight(1)
                    }else if (this.flagstate == false){
                        console.log('erase')
                        this.drawbox()
                    }
            }
            this.flag = function(win_or_not) {
                if (this.openstate == false){
                    if (win_or_not == false){
                        if (this.flagstate == true){
                            this.drawbox()
                            fill(0);
                            stroke(0)
                            strokeWeight(1)
                            triangle((this.x*20)+10,(this.y*20)+13,(this.x*20)+5.5,(this.y*20)+16,(this.x*20)+14.5,(this.y*20)+16)
                            rect((this.x*20)+9,(this.y*20)+5,1,10)
                            fill(255,0,0);
                            strokeWeight(0)
                            triangle((this.x*20)+11,(this.y*20)+3,(this.x*20)+4,(this.y*20)+6.5,(this.x*20)+11,(this.y*20)+11)
                            strokeWeight(1)
                        }else if (this.flagstate == false){
                            this.drawbox()
                        }
                    }else{
                        this.drawbox()
                        fill(0);
                        stroke(0)
                        strokeWeight(1)
                        triangle((this.x*20)+10,(this.y*20)+13,(this.x*20)+5.5,(this.y*20)+16,(this.x*20)+14.5,(this.y*20)+16)
                        rect((this.x*20)+9,(this.y*20)+5,1,10)
                        fill(255,0,0);
                        strokeWeight(0)
                        triangle((this.x*20)+11,(this.y*20)+3,(this.x*20)+4,(this.y*20)+6.5,(this.x*20)+11,(this.y*20)+11)
                        strokeWeight(1)
                        this.win_or_not = "I'm won already bro!"
                        this.flagstate = "I'm won already bro!"
                    }
                }
            }
            
            this.ClickedOne = function(){
                fill(255,0,0)
                rect(this.x*20,this.y*20,18,18)
                fill(0);
                ellipse((this.x*20)+9,(this.y*20)+9,10,10)
                console.log('ka')
            }
        }
        
        function GameBoard(x,y,mines){
            this.x=x;
            this.y=y;
            this.mines=mines;
            flagleft = mines;
            timer = 0;
            
            if (this.mines > 999){
                alert('you have too many bombs! ')
                this.mines = 999
            }
            if (this.x*this.y < this.mines){
                this.mines = this.x*this.y
            }
            this.build=function (){
                noStroke()
                fill(255)
                triangle(x*20+5,10, x*20+10+25,10, x*20+10,10+25)
                fill(139)
                triangle(x*20+10+25,10, x*20+10,10+25, x*20+10+25,10+25)
                fill(189)
                rect(x*20+10+2,10+2,21,21)
                stroke(0)
                strokeWeight(1)
                fill(255,255,0)
                ellipse(x*20+22.5,22.5,15,15)
                noFill()
                strokeWeight(2.3)
                point(x*20+17.5+2.5,17.5+2.5)
                point(x*20+22+2.5,17.5+2.5)
                strokeWeight(1)
                arc(x*20+20+2.5,19+2.5,10,10,0+QUARTER_PI,HALF_PI+QUARTER_PI)
                this.countflag()
                fill(0)
                rect(Gameboard.x*20+10,80,50,25)
                textWidth(20)
                textSize(20);
                fill(255,0,0)
                text('000',(Gameboard.x*20)+18,100)
                fill(255)
                for(i=0;i<this.x;i++){
                    cellsLocations.push([])
                    for(j=0;j<this.y;j++){
                        cellsLocations[i].push(new Cell(i,j,0,false,false,false,false))
                    }
                }
                for(i=0;i<this.x;i++){
                    cellsLocations.push([])
                    for(j=0;j<this.y;j++){
                        cellsLocations[i][j].drawbox()
                    }
                }
            };
            this.setbomb = function(){
                var checkpush = true;
                for(i=0;i<this.mines;i++){
                    checkpush = true
                    var randomnumberX = Math.ceil(random(-1,this.x-1))
                    var randomnumberY = Math.ceil(random(-1,this.y-1))
                    //checks if there are same one or not
                    if (cellsLocations[randomnumberX][randomnumberY].mineStat == true){
                        i -= 1
                    }
                    //changes minestat with Rx and Ry
                    cellsLocations[randomnumberX][randomnumberY].mineStat = true
                    //checks if full if not check wether mouse is on the mine or not
                    if (this.x*this.y == this.mines){
                        console.log('full')
                    }else{
                        if (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].mineStat == true){
                            i -= 1
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].mineStat = false
                            checkpush = false;
                        }
                    }
                    //finally pushes into coordinate lists
                    if (checkpush == false){
                        console.log('I am kentabanana s god')
                    }else{
                        minesLocations.push([randomnumberX,randomnumberY])
                    }
                }
                for(i=0;i<this.x;i++){
                    cellsLocations.push([])
                    for(j=0;j<this.y;j++){
                        cellsLocations[i][j].addaround()
                    }
                }
            }
            
            this.countflag = function(){
                noStroke()
                fill(0)
                rect(x*20+10,50,50,25)
                textWidth(20)
                textSize(20);
                fill(255,0,0)
                if (flagleft == 0){
                    text('000',(x*20)+18,70)
                }else if (flagleft < 0){
                    if(String(flagleft).length ==2){
                        console.log('u')
                        text('- 0'+ String(flagleft).slice(1),(x*20)+18,70)
                    }else if(String(flagleft).length==3){
                        text('- '+ String(flagleft).slice(1),(x*20)+18,70)
                    }else if(String(flagleft).length>3){
                        text('- '+ String(flagleft).slice(String(flagleft).length-2),(x*20)+18,70)
                    }
                }else{
                if(flagleft < 1000){
                    if(String(flagleft).length ==1){
                        text('00' + flagleft,(x*20)+18,70)
                    }else if(String(flagleft).length ==2){
                        text('0' + flagleft,(x*20)+18,70)
                    }else if(String(flagleft).length==3){
                        text(flagleft,(x*20)+18,70)
                    }
                }}
                stroke(0)
            }
            
            this.clickopen = function(x,y){
                if (cellsLocations[x][y].flagstate == false){
                    try{
                    cellsLocations[x][y].pushzero()
                    cellsLocations[x][y].zero()
                    }catch(err){
                        console.log('number too big')
                    }
                }
            }
            this.checkflagbomb = function(){
                console.log('akla')
                for (a=0;a<=x;a++){
                    for (b=0;b<=y;b++){
                        try{
                            if((cellsLocations[a][b].flagstate == true) && (cellsLocations[a][b].mineStat==false)){
                                console.log(a,b)
                                cellsLocations[a][b].showwrong()
                            }
                        }catch(err){
                            
                        }
                    }
                }
            }
            this.lose=function (){
                winlose = true
                noStroke()
                fill(255)
                triangle(x*20+5,10, x*20+10+25,10, x*20+10,10+25)
                fill(139)
                triangle(x*20+10+25,10, x*20+10,10+25, x*20+10+25,10+25)
                fill(189)
                rect(x*20+10+2,10+2,21,21)
                stroke(0)
                strokeWeight(1)
                fill(255,255,0)
                ellipse(x*20+22.5,22.5,15,15)
                noFill()
                stroke(0)
                line((x*20+17.5-1)-1+2.5,(17.5-1)-1+2.5,(x*20+17.5+1)-1+2.5,(17.5+1)-1+2.5)
                line((x*20+17.5+1)-1+2.5,(17.5-1)-1+2.5,(x*20+17.5-1)-1+2.5,(17.5+1)-1+2.5)
                line((x*20+22-1)+0.8+2.5,(17.5-1)-0.8+2.5,(x*20+22+1)+0.8+2.5,(17.5+1)-0.8+2.5)
                line((x*20+22-1)+0.8+2.5,(17.5+1)-0.8+2.5,(x*20+22+1)+0.8+2.5,(17.5-1)-0.8+2.5)
                strokeWeight(1)
                arc(x*20+20+2.5,19+8+2.5,10,10,-HALF_PI-QUARTER_PI,-QUARTER_PI)
                fill(255)
                for(i = 0;i<=minesLocations.length;i++){
                    if (cellsLocations[minesLocations[i][0]][minesLocations[i][1]].flagstate == false){
                        cellsLocations[minesLocations[i][0]][minesLocations[i][1]].showbomb()
                    }
                }
            };
            this.reset = function(){x*20+5,10, x*20+10+25,10
                if (mouseX > this.x*20+10 && mouseX < this.x*20+10+25 && mouseY > 10 && mouseY < 35){
                    console.log('lala') 
                    clearInterval(inter)
                    checker;
                    minesLocations=[]
                    cellsLocations=[]
                    allzeros = []
                    clickedone;
                    space = false;
                    Gameboard.build()
                    winlose = false;
                    first = true
                    flagleft = this.mines
                    this.countflag()
                    timer = 0;
                    fill(0)
                    rect(Gameboard.x*20+10,80,50,25)
                    textWidth(20)
                    textSize(20);
                    fill(255,0,0)
                    text('000',(Gameboard.x*20)+18,100)
                }
            };
            this.surprises = function(clicked){
                if (clicked === true){
                    if ((mouseX < this.x*20 && mouseY < this.y*20)&&(mouseX > 0 && mouseY > 0)){
                        noStroke()
                        fill(255)
                        triangle(x*20+5,10, x*20+10+25,10, x*20+10,10+25)
                        fill(139)
                        triangle(x*20+10+25,10, x*20+10,10+25, x*20+10+25,10+25)
                        fill(189)
                        rect(x*20+10+2,10+2,21,21)
                        stroke(0)
                        strokeWeight(1)
                        fill(255,255,0)
                        ellipse(x*20+22.5,22.5,15,15)
                        noFill()
                        strokeWeight(2.7)
                        stroke(0)
                        point(x*20+17.3+2.5,17+2.5)
                        point(x*20+22.7+2.5,17+2.5)
                        strokeWeight(1)
                        ellipse(x*20+20+2.5,22+2.5,4,4.3)
                        fill(255)
                    }
                }else{
                    noStroke()
                    fill(255)
                    triangle(x*20+5,10, x*20+10+25,10, x*20+10,10+25)
                    fill(139)
                    triangle(x*20+10+25,10, x*20+10,10+25, x*20+10+25,10+25)
                    fill(189)
                    rect(x*20+10+2,10+2,21,21)
                    stroke(0)
                    strokeWeight(1)
                    fill(255,255,0)
                    ellipse(x*20+22.5,22.5,15,15)
                    noFill()
                    strokeWeight(2.3)
                    stroke(0)
                    point(x*20+17.5+2.5,17.5+2.5)
                    point(x*20+22+2.5,17.5+2.5)
                    strokeWeight(1)
                    arc(x*20+20+2.5,19+2.5,10,10,0+QUARTER_PI,HALF_PI+QUARTER_PI)
                    fill(255)
                }
            };
            this.win = function(){
                if (this.first != true){
                    checker = false
                        for (i = 0;i<=this.x;i++){
                            for (j = 0;j<=this.y;j++){
                                try{
                                    if ((cellsLocations[i][j].mineStat == false) && (cellsLocations[i][j].openstate == false)){
                                        checker = true
                                    }
                                }catch(err){
                                    
                                }
                                try{
                                    if ((cellsLocations[i][j].mineStat == false) && (cellsLocations[i][j].stayflag == true) && (cellsLocations[i][j].flagstate == true)){
                                        checker = true
                                    }
                                }catch(err){
                                    
                                }
                            }
                        } 
                }
                if (checker == false){
                    alert('win!')
                    winlose = true
                    noStroke()
                    fill(255)
                    triangle(x*20+5,10, x*20+10+25,10, x*20+10,10+25)
                    fill(139)
                    triangle(x*20+10+25,10, x*20+10,10+25, x*20+10+25,10+25)
                    fill(189)
                    rect(x*20+10+2,10+2,21,21)
                    stroke(0)
                    strokeWeight(1)
                    fill(255,255,0)
                    ellipse(x*20+22.5,22.5,15,15)
                    noFill()
                    strokeWeight(3.5)
                    point(x*20+17.5+2.5,17.5+2.5)
                    point(x*20+22+2.5,17.5+2.5)
                    strokeWeight(1)
                    line(x*20+17.1+2.5,16.2+2.5,x*20+22.4+2.5,16.2+2.5)
                    line(x*20+16.9+2.5,16.2+2.5,x*20+12.5+2.5,20+2.5)
                    line(x*20+22.4+2.5,16.2+2.5,x*20+27+2.5,20+2.5)
                    arc(x*20+20+2.5,19+2.5,10,10,0+QUARTER_PI,HALF_PI+QUARTER_PI)
                    fill(255)
                    
                    for(i = 0;i<=minesLocations.length;i++){
                        try{
                            cellsLocations[minesLocations[i][0]][minesLocations[i][1]].flag(true)
                        }catch(err){
                            
                        }
                    }
                }
            }
            
        }
        
        function mouseReleased(){
            //checks the smiley clicked or not. if so, reset
            Gameboard.reset()
            if ((first == true) && (mouseX < Gameboard.x*20) && (mouseY < Gameboard.y*20)){
                inter = setInterval(function(){ 
                    console.log(timer)
                    timer += 1; 
                    fill(0)
                    rect(Gameboard.x*20+10,80,50,25)
                    textWidth(20)
                    textSize(20);
                    fill(255,0,0)
                    if (String(timer).length == 1){
                        text('00' + timer,(Gameboard.x*20)+18,100)
                    }else if (String(timer).length == 2){
                        text('0' + timer,(Gameboard.x*20)+18,100)
                    }else if (String(timer).length == 3){
                        text(timer,(Gameboard.x*20)+18,100)
                    }
                    if(timer > 999){
                        clearInterval(inter)
                        fill(0)
                        rect(Gameboard.x*20+10,80,50,25)
                        textWidth(20)
                        textSize(20);
                        fill(255,0,0)
                        text('999',(Gameboard.x*20)+18,100)
                    }
                    if(winlose == true){
                        clearInterval(inter)
                        fill(0)
                        rect(Gameboard.x*20+10,80,50,25)
                        textWidth(20)
                        textSize(20);
                        fill(255,0,0)
                        text('999',(Gameboard.x*20)+18,100)
                    }
                },1000)
                console.log('first!')
                first = false
                try{
                Gameboard.setbomb()
                console.log(cellsLocations)
                console.log(minesLocations)
                }catch(err){
                    
                }
            }
            if (winlose != true){
                try{
                    Gameboard.surprises(false)
                    if ((cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].stayflag == true) && (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flagstate == false)){
                        cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].open()
                        cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].pushzero()
                        cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].zero()
                    }
                    Gameboard.clickopen(Math.ceil(mouseX/20)-1,Math.ceil(mouseY/20)-1)
                    Gameboard.win()
                    first = false
                }
                catch(err){
                }
            }
        }
        function mousePressed(){
            if (winlose != true){
                Gameboard.surprises(true)
            }
        }
        function keyPressed() {
            console.log(timer)
            if (winlose != true){
                if (keyCode == 70){
                    if (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flagstate == true){
                        if(cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].openstate == false){
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flagstate = false
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flag(false)
                            flagleft+=1
                            console.log(flagleft)
                            Gameboard.countflag()
                        }
                    }
                    else if (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flagstate == false){
                        if(cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].openstate == false){
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flagstate = true
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].flag(false)
                            flagleft-=1
                            console.log(flagleft)
                            Gameboard.countflag()
                        }
                    }
                    if (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].openstate == true){
                        if (cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].stayflag == true){
                            console.log('tiger@!')
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].checkflag()
                            cellsLocations[Math.ceil(mouseX/20)-1][Math.ceil(mouseY/20)-1].openstate = false
                            Gameboard.countflag()
                        }
                    }
                }
            }
        }

    </script>
    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.5.14/p5.min.js"></script>-->
    
    
    
    <style>
        body {
            overflow:hidden;
        }
    </style>
    
</head>

<body >
</body>

</html>
