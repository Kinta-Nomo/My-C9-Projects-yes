{"filter":false,"title":"antTraveller.1.js","tooltip":"/antTraveller.1.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":154,"column":0},"action":"remove","lines":["//v2","","function distance(foods, point){","    //foods & point: not tuple should be list","    var foodsdist = []","    for (var i = 0;i<foods.length;i++){","        foodsdist.push(((foods[i][0]-point[0])**2+(foods[i][1]-point[1])**2)**0.5)","    }","    return Math.min(...foodsdist)","}","","","function Ant(){","    //wether it follows other's path","    this.craze = Math.random() >= 0.5;","    ","    //if not crazy, they'll select one of the path","    this.selectedPath = []","    ","    //if found food, this becomes true","    this.found = false","    ","    //if crazy, they'll mark their path in this","    this.path = []","    ","    this.locate = [width/2,height/2]","    ","    //aging that leads to dying","    this.age = 0","    ","    //kills ant & removes from the ants array","    this.die = function(){","        ants.splice(ants.indexOf(this),1);","    } ","    ","    this.findPath = function(){","        this.age += 1","        ","        //sadly, ants dies too!","        if (this.age == 1000){","            this.die()  ","            console.log(\"i died!\")","            ","            //exit from the function","            return null","        }","        ","        //activated when ant found the food in past","        if (this.found){","            //check if crazy","            if (this.craze){","                ","                //check if back to nest","                if (this.path.length != 0){","                    //going back the \"pathway\"","                    this.locate = this.path[this.path.length-1]","                    this.path.splice(this.path.length-1, 1)","                }else{","                    //if back to nest, pretend that it has not ever touched the food","                    this.found = false","                }","            }else{","                //if not crazy, start going back the selected path","                ","                //check if back to nest","                if (this.selectedPath.length != 0){","                    ","                    this.locate = this.selectedPath[this.selectedPath.length-1]","                    this.selectedPath.splice(this.selectedPath.length-1, 1)","                }else{","                    //if back to nest, pretend that it has not ever touched the food ","                    this.found = false","                    ","                    //then select the new nest to follow","                    this.selectedPath = paths[Math.floor(Math.random()*paths.length)].slice();","                }","            }","        }else{","            //very crazy and randomly runs around","            if (this.craze){","                //readability > length!","                x = this.locate[0]","                y = this.locate[1]","                this.locate = [x+random(-10,10),y+random(-10,10)]","                this.path.push(this.locate)","                ","                //check if reached the food. If so, push the path into paths","                if (distance(foods, this.locate) < 10){","                    paths.push(this.path.slice())","                    this.found = true;","                }","            }else{","                //ants that are ok.. they think crazy ants are crazy","                ","                //check if it has any path selected!","                if (this.selectedPath.length == 0){","                    //check if there are any available path","                    if (paths.length != 0){","                        ","                        this.selectedPath = paths[Math.floor(Math.random()*paths.length)].slice();","                    }else{","                        //ok.. no one found any path yet! than it'll be crazy too!","                        this.craze = true","                        ","                        ////not that.. let's just wait! ","                    }","                }else{","                    //if path is selected, we need to start going to the food","                    this.locate = this.selectedPath[0]","                    ","                    this.selectedPath.splice(0,1)","                    ","                    if (this.selectedPath.length == 0){","                        this.found = true;","                    }","                }","            }","        } ","    }","}","","//array with all ants","var ants = []","","//array of every paths crazy ants find","var paths = []","","//array of foods","var foods = [[150,150]]","","function setup(){","    createCanvas(200,200);","    background(255);","    var antGen = setInterval(function(){","        ants.push(new Ant())","    },500)","}","","function draw(){","    background(255);","    for (var i = 0;i<ants.length;i++){","        ants[i].findPath()","        ","        //if crazy, red. If not crazy, black","        if (ants[i].craze == true){ ","            stroke(255,0,0)","        }else{","            stroke(0)","        }","        strokeWeight(2)","        point(ants[i].locate[0],ants[i].locate[1])","    }","}","",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":193,"column":0},"action":"insert","lines":["//include library P5.js","","function distance(foods, point){","    //foods & point: not tuple should be list","    var foodsdist = []","    for (var i = 0;i<foods.length;i++){","        foodsdist.push(((foods[i][0]-point[0])**2+(foods[i][1]-point[1])**2)**0.5)","    }","    return Math.min(...foodsdist)","}","","","function Ant(){","    //wether it follows other's path","    this.craze = Math.random() >= 0.5;","    ","    //if not crazy, they'll select one of the path","    this.selectedPath = []","    ","    //if found food, this becomes true","    this.found = false","    ","    //if crazy, they'll mark their path in this","    this.path = []","    ","    this.locate = [width/4,height/4]","    ","    //aging that leads to dying","    this.age = 0","    ","    //aging that leads to dying","    this.leaving = true","    ","    //pointer for travelling","    this.pointer = 0","    ","    //kills ant & removes from the ants array","    this.die = function(){","        ants.splice(ants.indexOf(this),1);","    } ","    ","    this.findPath = function(){","        this.age += 1","        ","        //sadly, ants dies too!","        //longer the lifetime, faster learning but less accurater the path finding","        if (this.age == 1000){ ","            this.die()  ","            console.log(\"i died!\")","            ","            //exit from the function","            return null","        }","        ","        //activated when ant found the food in past","        if (this.found){","            //check if crazy","            if (this.craze){","                ","                //more shorter the way, the number of pushing increases!","                ","                //check if back to nest","                if (this.leaving){","                    //going back the \"pathway\"","                    this.locate = this.path[this.path.length-1-this.pointer]","                    this.pointer += 1","                    if (this.pointer == this.path.length-1){","                        //if the pointer reached to the bottom, let's go there again!","                        this.leaving = false","                        ","                        //every go-return, adds the path into the path list","                        paths.push(this.path.slice())","                    }","                }else{","                    //if back to nest, follow the same path again","                    this.locate = this.path[this.path.length-1-this.pointer]","                    this.pointer -= 1","                    if (this.pointer == 0){","                        //if the pointer reached to the top, let's go backssss again!","                        this.leaving = true","                        ","                        //every go-return, adds the path into the path list","                        paths.push(this.path.slice())","                    }","                }","            }else{","                //if not crazy, start going back the selected path","                ","                //check if back to nest","                if (this.selectedPath.length != 0){","                    ","                    this.locate = this.selectedPath[this.selectedPath.length-1]","                    this.selectedPath.splice(this.selectedPath.length-1, 1)","                }else{","                    //if back to nest, pretend that it has not ever touched the food ","                    this.found = false","                    ","                    //then select the new nest to follow","                    this.selectedPath = paths[Math.floor(Math.random()*paths.length)].slice();","                }","            }","        }else{","            //very crazy and randomly runs around","            if (this.craze){","                //readability > length!","                x = this.locate[0]","                y = this.locate[1]","                this.locate = [x+random(-10,10),y+random(-10,10)]","                this.path.push(this.locate)","                ","                //check if reached the food. If so, push the path into paths","                if (distance(foods, this.locate) < 10){","                    paths.push(this.path.slice())","                    this.found = true;","                }","            }else{","                //ants that are ok.. they think crazy ants are crazy","                ","                //check if it has any path selected!","                if (this.selectedPath.length == 0){","                    //check if there are any available path","                    if (paths.length != 0){","                        ","                        this.selectedPath = paths[Math.floor(Math.random()*paths.length)].slice();","                    }else{","                        //ok.. no one found any path yet! than it'll be crazy too!","                        this.craze = true","                        ","                        ////not that.. let's just wait! ","                    }","                }else{","                    //if path is selected, we need to start going to the food","                    this.locate = this.selectedPath[0]","                    ","                    this.selectedPath.splice(0,1)","                    ","                    if (this.selectedPath.length == 0){","                        this.found = true;","                    }","                }","            }","        } ","    }","}","","//array with all ants","var ants = []","","//array of every paths crazy ants find","var paths = []","","//array of foods","var foods = [[150,150],[100,150],[150,100]]","","function setup(){","    createCanvas(200,200);","    background(255);","    var antGen = setInterval(function(){","        ants.push(new Ant())","    },500)","}","","function draw(){","    background(255);","    ","    //drawing foods","    for (var i = 0;i<foods.length;i++){","        noStroke();","        fill(0,0,250)","        ellipse(foods[i][0],foods[i][1],10,10)","    }","    ","    //drawing ants","    for (var i = 0;i<ants.length;i++){","        ants[i].findPath()","        ","        //if crazy, if found, blue, if not, red. If not crazy, black","        if (ants[i].craze == true){ ","            if (ants[i].found){","                stroke(0,0,255)","            }else{","                stroke(255,0,0)","            }","        }else{","            stroke(0)","        }","        strokeWeight(5)","        point(ants[i].locate[0],ants[i].locate[1])","    }","    ","    ","}","",""]}]]},"ace":{"folds":[],"scrolltop":2901,"scrollleft":0,"selection":{"start":{"row":193,"column":0},"end":{"row":193,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":169,"state":"no_regex","mode":"ace/mode/javascript"}},"timestamp":1522935298910,"hash":"1ca2e967c65a6ea3ab29f0bf4d97ac4f5563fa6b"}